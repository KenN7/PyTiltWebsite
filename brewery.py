#!/usr/bin/python3
# flask app to handle connected brewery
#import os
from flask import Flask, request, redirect, url_for, render_template
#from werkzeug.utils import secure_filename
from models import *
from datetime import datetime
from statistics import mean

app = Flask(__name__)

max_points = 100

# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.connect()
# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()


@app.route('/')
def main():
    datalist = []
    if request.args:
        #print(request.args)
        d1 = datetime.strptime(request.args['begindate'], '%Y-%m-%d')
        d2 = datetime.strptime(request.args['enddate'], '%Y-%m-%d')

        #period = Tilt.select().where(Tilt.time > d1).where(Tilt.time <= d2).order_by(Tilt.time.asc()) #this actually takes time
        period = Tilt.select().where(Tilt.time > d1).where(Tilt.time <= d2) #this actually takes time
        res = int(len(period)/max_points)

        origgravity = mean([d.gravity for d in period[:100]])/1000
        finalgravity = mean([d.gravity for d in period[-100:]])/1000
        abv = (76.08 * (origgravity-finalgravity) / (1.775-origgravity)) * (finalgravity / 0.794)

        apparent_att = 100 * (origgravity-finalgravity)/(origgravity-1.0)

        platoOG = (-1 * 616.868) + (1111.14 * origgravity)-(630.272 * origgravity**2) + (135.997 * origgravity**3)
        platoFG = (-1 * 616.868) + (1111.14 * finalgravity)-(630.272 * finalgravity**2) + (135.997 * finalgravity**3)

        real_ext = 0.1808 * platoOG + 0.8192 * platoFG
        real_att = (1 - real_ext / platoOG)*100

        i=0
        for d in period[::res]:
            datalist.append((d.time.timestamp(),mean([d.temp for d in period[i:i+res]]),mean([d.gravity for d in period[i:i+res]])))
            i+=res
            #datalist.append((d.time.timestamp(),d.temp,d.gravity))
    else:
        period =  Tilt.select()
        res = int(len(period)/max_points)
        for d in period.order_by(Tilt.time.asc())[::res]:
            datalist.append((d.time.timestamp(),d.temp,d.gravity))
        origgravity = 0
        finalgravity = 0
        abv = 0
        apparent_att = 0
        platoOG = 0
        platoFG = 0
        real_att = 0

    if datalist == []:
        return render_template('index.html')

    unzipped = list(zip(*datalist))

    #print(unzipped)
    return render_template('index.html', time=unzipped[0],  temp=unzipped[1], gravity=unzipped[2], og=origgravity, fg=finalgravity, abv=abv, aa=apparent_att, platoog=platoOG, platofg=platoFG, realatt = real_att)

    #     datag.append((d.time,d.gravity))
    #     datat.append((d.time,d.temp))
    #
    # return render_template('index.html', datag=datag,  datat=datat)

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000)
