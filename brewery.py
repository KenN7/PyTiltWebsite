# flask app to handle connected brewery
#import os
from flask import Flask, request, redirect, url_for, render_template
#from werkzeug.utils import secure_filename
from models import *
from datetime import datetime

app = Flask(__name__)

# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.connect()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()


@app.route('/')
def main():
    datalist = []
    if request.args:
        #print(request.args)
        d1 = datetime.strptime(request.args['begindate'], '%Y-%m-%d')
        d2 = datetime.strptime(request.args['enddate'], '%Y-%m-%d')
        for d in Tilt.select().where(Tilt.time > d1).where(Tilt.time < d2).order_by(Tilt.time.asc()):
            datalist.append((d.time,d.temp,d.gravity))
    else:
        for d in Tilt.select().order_by(Tilt.time.asc()):
            datalist.append((d.time,d.temp,d.gravity))

    #print(datalist)
    if datalist == []:
        return render_template('index.html')

    unzipped = list(zip(*datalist))
    #print(unzipped)
    return render_template('index.html', time=unzipped[0],  temp=unzipped[1], gravity=unzipped[2])

    #     datag.append((d.time,d.gravity))
    #     datat.append((d.time,d.temp))
    #
    # return render_template('index.html', datag=datag,  datat=datat)

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000)
